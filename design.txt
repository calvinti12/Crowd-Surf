/---------	/-----------
| -------	| ---------
| |		| |_______						 
| |rowd		\________ \urf	    		for Windows 10 (Anniversary Edition)	
| |		         | |					  
| -------	 --------/ |
\---------	----------/					-by Thushan Puhalendran and Sean Hughes, 2016
________________________________________________________________________________________________________________
----____----____----____----____----____----____----____----____----____----____----____----____----____----____
________________________________________________________________________________________________________________

DESIGN
Languages, Formatting, etc. Used: Python 2, HTML, CSS, Javascript, SQL, GIT, JINJA
________________________________________________________________________________________________________________
----____----____----____----____----____----____----____----____----____----____----____----____----____----____
________________________________________________________________________________________________________________

Contents:

Section I:	scalpyr.py and data_grabber.py
Section II:	adding concerts
Section III:	viewing all concerts
Section IV:	autocomplete/search
Section V:	SQL Databases
Section VI:	Google Charts API
Section VIII:	concert.html, page.html, other HTML and JavaScript
Section VIII:	CSS styling

________________________________________________________________________________________________________________
----____----____----____----____----____----____----____----____----____----____----____----____----____----____
________________________________________________________________________________________________________________

Section I: scalpyr.py and data_grabber.py - (dynamic scraping and database updating)

The overall purpose of the code in scalpyr.py and data_grabber.py is to scrape data by querying seatgeek.com's
API for results (ticket prices) for a given list of concerts. Then we take the JSON response from SeatGeek's
REST API and convert that information into an array of dictionaries which we will be able to manipulate and use
in other areas of our code to populate our concert pages with data, our charts and other information. Note that
we are using the BeautifulSoup Python library to give us additional functions that help us pull data from
SeatGeek's HTML pages to more effectively convert from HTML data into the Pythonic format we will require
and store select relevant information in our database.

All of these functions are defined within the greater Scalpyr object which we will be calling later such as
in helpers.py whenever we want to pull new data.

Check inside data_grabber.py to also see how we have set up a while(true) function to continuously loop pull
data from SeatGeek forever so long as the code is running. Note in particular how we have placed a time.sleep
function in order to only update periodically so as to not overload SeatGeek's API with too many requests. The
function 

________________________________________________________________________________________________________________
----____----____----____----____----____----____----____----____----____----____----____----____----____----____
________________________________________________________________________________________________________________

Section II: adding concerts

It is possible to add new concerts anywhere around the world which have online ticket providers recorded on
SeatGeek's API. We can see this function in helpers.py. The functiont takes the user input and searches SeatGeek
for any concerts similar to the input before using the prior mentioned scalpyr object to get dictionaries of the
relevant event data. We then insert the data into our SQL database.

________________________________________________________________________________________________________________
----____----____----____----____----____----____----____----____----____----____----____----____----____----____
________________________________________________________________________________________________________________

Section III: viewing all concerts

The all concerts.html page passes in all of the concert data for the concerts that are currently being tracked.
Each one also has a URL that links to the specific concert page for that concert.

________________________________________________________________________________________________________________
----____----____----____----____----____----____----____----____----____----____----____----____----____----____
________________________________________________________________________________________________________________

Section IV: autocomplete/search

In helpers.py, getAutocompleteData() is called to take all of the names and IDs of concerts currently stored
in the database. This is called in application.py which runs the flask components of the coding and is passed
into the index.html page - our splash page. In index.html there is a meta tag which takes this information and
passes it on to the javascript file myScript.js which then calls jquery's built in autocomplete function. This
allows us to use jquery's built in functionality rather than build redundant code so we have better overall
design. Finally, this is passed back to our index.html page to our search bar.

________________________________________________________________________________________________________________
----____----____----____----____----____----____----____----____----____----____----____----____----____----____
________________________________________________________________________________________________________________

Section V: SQL Databases

The main database we are utilising is tickets.db which stores all of the low prices, high prices, average
prices, ticket volumes, and datetimes of every log. We primarily query our database using helpers.py to
populate all of the data that appears on concert pages, and also our index.html's search bar and our
all concerts page's table.

________________________________________________________________________________________________________________
----____----____----____----____----____----____----____----____----____----____----____----____----____----____
________________________________________________________________________________________________________________

Section VI: Google Charts API

We have utilised Google Charts' API in order to graph all of our relevant pricing data. In particular, we have
passed in functions which allow us to dynamically increase the number of entries in our graph.

First, we begin in helpers.py where we query our database for all of the data we need to populate our charts
using getvolumechartdata(id) and getChartdata(id). Note that we have, in helpers.py, converted the results of
our SQL Query (which returns a dictionary) into the appropriate data type then appended them into an array as
our Chart requires an array or list of data to interpret. These functions are called in application.py and
the arrays are passed into page.html - the unique page that is generated for each concert.

Next, we have meta tags in page.html which generate a unique id for the data that is being passed in. Note that
we have used script tags so that we can access the Google Charts API in concert.html (page.html extends
concerts.html). We then move to concertScripts.js which uses the unique id to take the arrays and uses
functions from Google's API to create a DataTable for each graph where we dynamically add rows and insert
data for every element of our array. Note that we have used arrays of arrays where necessary to facilitate
this. Finally, the Google API draws the chart with a unique id and page.html calls that unique id in
a specific place on the page where we want that chart to appear.

________________________________________________________________________________________________________________
----____----____----____----____----____----____----____----____----____----____----____----____----____----____
________________________________________________________________________________________________________________

Section VII: concert.html, page.html, other HTML and JavaScript

We will now take a moment to describe our various HTML documents and their associated JavaScript pages. Firstly
note that concerts.html is a generic template for the concert pages, and each concert page is extended by
page.html. By feeding in unique data to every page.html then we receive all of the unique concert pages that
we need without having to unnecessarily continuously create new pages for every concert - instead the only
increase in memory usage stems from the increasing size of our database. This helps streamline our design and
reduces redunancies. 

________________________________________________________________________________________________________________
----____----____----____----____----____----____----____----____----____----____----____----____----____----____
________________________________________________________________________________________________________________

Section VIII: CSS Styling

The main database we are utilising is tickets.db which stores all of the low prices, high prices, average
prices, ticket volumes, and datetimes of every log. We primarily query our database using helpers.py to
populate all of the data that appears on concert pages, and also our index.html's search bar and our
all concerts page's table.

________________________________________________________________________________________________________________
----____----____----____----____----____----____----____----____----____----____----____----____----____----____
________________________________________________________________________________________________________________





